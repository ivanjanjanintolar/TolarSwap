"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Net = require("web3-net");
var Method = require("web3-core-method");
var _ = require("underscore");
var TolarNet = /** @class */ (function (_super) {
    __extends(TolarNet, _super);
    function TolarNet(web3) {
        var _this = _super.call(this, web3) || this;
        _this.web3 = web3;
        _this.methods = [
            new Method({
                name: "peerCount",
                call: "net_peerCount",
                params: 0,
            }),
            new Method({
                name: "masterNodeCount",
                call: "net_masterNodeCount",
                params: 0,
            }),
            new Method({
                name: "isMasterNode",
                call: "net_isMasterNode",
                params: 0,
            }),
            new Method({
                name: "maxPeerCount",
                call: "net_maxPeerCount",
                params: 0,
            }),
        ];
        _this.extendNet();
        return _this;
    }
    TolarNet.prototype.extendNet = function () {
        var _this = this;
        _.each(this.methods, function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this.web3._requestManager);
        });
    };
    return TolarNet;
}(Net));
exports.TolarNet = TolarNet;
//# sourceMappingURL=tolar-net.js.map