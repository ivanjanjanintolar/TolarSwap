"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tolar_account_1 = require("./tolar-account/tolar-account");
var tolar_net_1 = require("./tolar-net/tolar-net");
var _ = require("underscore");
var Method = require("web3-core-method");
var Tolar = /** @class */ (function () {
    function Tolar(web3) {
        this.web3 = web3;
        this.defaultAccount = null;
        this.defaultBlock = "latest";
        this.net = new tolar_net_1.TolarNet(this.web3);
        this.accounts = new tolar_account_1.TolarAccounts(this.web3);
        this.registerMethods();
    }
    Tolar.prototype.requestManager = function () {
        return this.web3._requestManager;
    };
    Tolar.prototype.setProvider = function (provider) {
        return this.web3.setProvider(provider);
    };
    Tolar.prototype.extendTolar = function () {
        var _this = this;
        _.each(this.methods, function (method) {
            method.attachToObject(_this);
            method.setRequestManager(_this.web3._requestManager);
        });
    };
    Tolar.prototype.setMethods = function () {
        this.methods = [
            new Method({
                name: "getBlockCount",
                call: "tol_getBlockCount",
                params: 0,
            }),
            new Method({
                name: "getBlockByHash",
                call: "tol_getBlockByHash",
                params: 1,
            }),
            new Method({
                name: "getBlockByIndex",
                call: "tol_getBlockByIndex",
                params: 1,
            }),
            new Method({
                name: "getTransaction",
                call: "tol_getTransaction",
                params: 1,
            }),
            new Method({
                name: "getBlockchainInfo",
                call: "tol_getBlockchainInfo",
                params: 0,
            }),
            new Method({
                name: "getTransactionList",
                call: "tol_getTransactionList",
                params: 3,
            }),
            new Method({
                name: "getNonce",
                call: "tol_getNonce",
                params: 1,
            }),
            new Method({
                name: "getBalance",
                call: "tol_getBalance",
                params: 2,
            }),
            new Method({
                name: "getLatestBalance",
                call: "tol_getLatestBalance",
                params: 1,
            }),
            new Method({
                name: "tryCallTransaction",
                call: "tol_tryCallTransaction",
                params: 7,
            }),
            new Method({
                name: "getTransactionReceipt",
                call: "tol_getTransactionReceipt",
                params: 1,
            }),
            new Method({
                name: "getGasEstimate",
                call: "tol_getGasEstimate",
                params: 1,
            }),
            new Method({
                name: "getHashBytes",
                call: "util_getHashBytes",
                params: 1,
            }),
            new Method({
                name: "getHashHex",
                call: "util_getHashHex",
                params: 1,
            }),
            new Method({
                name: "sendSignedTransaction",
                call: "tx_sendSignedTransaction",
                params: 1,
            }),
        ];
    };
    Tolar.prototype.addDefaults = function () {
        var _this = this;
        this.methods.forEach(function (method) {
            method.defaultBlock = _this.defaultBlock;
            method.defaultAccount = _this.defaultAccount;
        });
    };
    Tolar.prototype.registerMethods = function () {
        this.setMethods();
        this.addDefaults();
        this.extendTolar();
    };
    return Tolar;
}());
exports.Tolar = Tolar;
module.exports = Tolar;
//# sourceMappingURL=index.js.map